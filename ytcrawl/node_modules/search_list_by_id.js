const { google } = require('googleapis');
const service = google.youtube('v3');
const oauth2Service = require('../common/oauth2_service');
const _ = require('lodash');

async function getSearchList(oauth2Client, channelId) {
    const res = await service.search.list({
        auth: oauth2Client,
        channelId: channelId,
        maxResults: 3,
        type: 'video',
        order: 'viewCount',
        part: 'id',
        q: '이슈',
        publishedAfter: '2019-01-01T00:00:00Z',
        publishedBefore: '2019-12-31T23:59:59Z',
        fields: 'items(id(videoId))'
    });

    if (res.data.items == null || res.data.items.length === 0) {
        throw new Error("데이터가 존재하지 않습니다.");
    }

    return res.data;
}

async function getVideoList(oauth2Client, videoIds) {
    const res = await service.videos.list({
        auth: oauth2Client,
        id: videoIds,
        part: 'snippet, statistics, contentDetails',
        fields: 'items(id, snippet(title, description, publishedAt), statistics(viewCount, commentCount, likeCount))'
    });

    if (res.data.items == null || res.data.items.length === 0) {
        throw new Error("데이터가 존재하지 않습니다.");
    }

    return res.data;
}

async function startSearch() {
    let client = await oauth2Service.refreshClient();

    let searchList = await getSearchList(client, "UCF4Wxdo3inmxP-Y59wXDsFw");
    let videoIdList = _.map(searchList.items, "id.videoId").join();
    let videoList = await getVideoList(client, videoIdList);

    console.log(JSON.stringify(videoList, null, 4));
}

startSearch().catch(console.error);